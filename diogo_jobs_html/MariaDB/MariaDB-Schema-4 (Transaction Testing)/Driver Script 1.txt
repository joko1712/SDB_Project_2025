#!/usr/local/bin/tclsh9.0
#OPTIONS
set library mariatcl ;# Maria Library
global mariastatus
set total_iterations 1000000 ;# Number of transactions before logging off
set RAISEERROR "false" ;# Exit script on Maria error (true or false)
set KEYANDTHINK "false" ;# Time for user thinking and keying (true or false)
set host "127.0.0.1" ;# Address of the server hosting Maria 
set port "3306" ;# Port of the Maria Server, defaults to 3306
set socket "null" ;# Maria Socket for local connections
set ssl_options { -ssl false } ;# Maria SSL/TLS options
set user "root" ;# Maria user
set password "root" ;# Password for the Maria user
set db "tpcc" ;# Database containing the TPC Schema
set prepare "false" ;# Use prepared statements
#OPTIONS

#LOAD LIBRARIES AND MODULES
if [catch {package require $library} message] { error "Failed to load $library - $message" }
if [catch {package require tpcccommon} ] { error "Failed to load tpcc common functions" } else { namespace import tpcccommon::* }
#TIMESTAMP
proc gettimestamp { } {
    set tstamp [ clock format [ clock seconds ] -format %Y%m%d%H%M%S ]
    return $tstamp
}
proc chk_socket { host socket } {
    if { ![string match windows $::tcl_platform(platform)] && ($host eq "127.0.0.1" || [ string tolower $host ] eq "localhost") && [ string tolower $socket ] != "null" } {
        return "TRUE"
    } else {
        return "FALSE"
    }
}

proc ConnectToMaria { host port socket ssl_options user password db } {
    global mariastatus
    #ssl_options is variable length so build a connectstring
    if { [ chk_socket $host $socket ] eq "TRUE" } {
	set use_socket "true"
	append connectstring " -socket $socket"
	 } else {
	set use_socket "false"
	append connectstring " -host $host -port $port"
	}
	foreach key [ dict keys $ssl_options ] {
	append connectstring " $key [ dict get $ssl_options $key ] "
	}
	append connectstring " -user $user"
	if { [ string tolower $password ] != "null" } {
	append connectstring " -password $password"
	}
	set login_command "mariaconnect [ dict get $connectstring ]"
	#eval the login command
        if [catch {set maria_handler [eval $login_command]}] {
		if $use_socket {
            puts "the local socket connection to $socket could not be established"
    } else {
            puts "the tcp connection to $host:$port could not be established"
    }
        set connected "false"
        } else {
        set connected "true"
        }
    if {$connected} {
        mariause $maria_handler $db
        maria::autocommit $maria_handler 0
	catch {set ssl_status [ maria::sel $maria_handler "show session status like 'ssl_cipher'" -list ]}
	if { [ info exists ssl_status ] } {
	puts [ join $ssl_status ]
	}
        return $maria_handler
    } else {
        error $mariastatus(message)
        return
    }
}
#NEW ORDER
proc neword { maria_handler no_w_id w_id_input prepare RAISEERROR } {
    global mariastatus
    #open new order cursor
    #2.4.1.2 select district id randomly from home warehouse where d_w_id = d_id
    set no_d_id [ RandomNumber 1 10 ]
    #2.4.1.2 Customer id randomly selected where c_d_id = d_id and c_w_id = w_id
    set no_c_id [ RandomNumber 1 3000 ]
    #2.4.1.3 Items in the order randomly selected from 5 to 15
    set ol_cnt [ RandomNumber 5 15 ]
    #2.4.1.6 order entry date O_ENTRY_D generated by SUT
    set date [ gettimestamp ]
    if {$prepare} {
        catch {mariaexec $maria_handler "set @no_w_id=$no_w_id,@w_id_input=$w_id_input,@no_d_id=$no_d_id,@no_c_id=$no_c_id,@ol_cnt=$ol_cnt,@next_o_id=0,@date=str_to_date($date,'%Y%m%d%H%i%s')"}
        catch {mariaexec $maria_handler "execute neword_st using @no_w_id,@w_id_input,@no_d_id,@no_c_id,@ol_cnt,@next_o_id,@date"}
    } else {
        mariaexec $maria_handler "set @next_o_id = 0"
        catch { mariaexec $maria_handler "CALL NEWORD($no_w_id,$w_id_input,$no_d_id,$no_c_id,$ol_cnt,@disc,@last,@credit,@dtax,@wtax,@next_o_id,str_to_date($date,'%Y%m%d%H%i%s'))" }
    }
    if { $mariastatus(code)  } {
        if { $RAISEERROR } {
            error "New Order : $mariastatus(message)"
        } else {
            puts $mariastatus(message) 
        } 
    } else {
        puts [ join [ maria::sel $maria_handler "select @disc,@last,@credit,@dtax,@wtax,@next_o_id" -list ] ]
    }
}

#PAYMENT
proc payment { maria_handler p_w_id w_id_input prepare RAISEERROR } {
    global mariastatus
    #2.5.1.1 The home warehouse id remains the same for each terminal
    #2.5.1.1 select district id randomly from home warehouse where d_w_id = d_id
    set p_d_id [ RandomNumber 1 10 ]
    #2.5.1.2 customer selected 60% of time by name and 40% of time by number
    set x [ RandomNumber 1 100 ]
    set y [ RandomNumber 1 100 ]
    if { $x <= 85 } {
        set p_c_d_id $p_d_id
        set p_c_w_id $p_w_id
    } else {
        #use a remote warehouse
        set p_c_d_id [ RandomNumber 1 10 ]
        set p_c_w_id [ RandomNumber 1 $w_id_input ]
        while { ($p_c_w_id == $p_w_id) && ($w_id_input != 1) } {
            set p_c_w_id [ RandomNumber 1  $w_id_input ]
        }
    }
    set nrnd [ NURand 255 0 999 123 ]
    set name [ randname $nrnd ]
    set p_c_id [ RandomNumber 1 3000 ]
    if { $y <= 60 } {
        #use customer name
        #C_LAST is generated
        set byname 1
    } else {
        #use customer number
        set byname 0
        set name {}
    }
    #2.5.1.3 random amount from 1 to 5000
    set p_h_amount [ RandomNumber 1 5000 ]
    #2.5.1.4 date selected from SUT
    set h_date [ gettimestamp ]
    #2.5.2.1 Payment Transaction
    if {$prepare} {
        catch {mariaexec $maria_handler "set @p_w_id=$p_w_id,@p_d_id=$p_d_id,@p_c_w_id=$p_c_w_id,@p_c_d_id=$p_c_d_id,@p_c_id=$p_c_id,@byname=$byname,@p_h_amount=$p_h_amount,@p_c_last='$name',@p_c_credit=0,@p_c_balance=0,@h_date=str_to_date($h_date,'%Y%m%d%H%i%s')"}
        catch { mariaexec $maria_handler "execute payment_st using @p_w_id,@p_d_id,@p_c_w_id,@p_c_d_id,@p_c_id,@byname,@p_h_amount,@p_c_last,@p_c_credit,@p_c_balance,@h_date"}
    } else {
        mariaexec $maria_handler "set @p_c_id = $p_c_id, @p_c_last = '$name', @p_c_credit = 0, @p_c_balance = 0"
        catch { mariaexec $maria_handler "CALL PAYMENT($p_w_id,$p_d_id,$p_c_w_id,$p_c_d_id,@p_c_id,$byname,$p_h_amount,@p_c_last,@p_w_street_1,@p_w_street_2,@p_w_city,@p_w_state,@p_w_zip,@p_d_street_1,@p_d_street_2,@p_d_city,@p_d_state,@p_d_zip,@p_c_first,@p_c_middle,@p_c_street_1,@p_c_street_2,@p_c_city,@p_c_state,@p_c_zip,@p_c_phone,@p_c_since,@p_c_credit,@p_c_credit_lim,@p_c_discount,@p_c_balance,@p_c_data,str_to_date($h_date,'%Y%m%d%H%i%s'))"}
    }
    if { $mariastatus(code) } {
        if { $RAISEERROR } {
            error "Payment : $mariastatus(message)"
        } else {
            puts $mariastatus(message) 
        } 
    } else {
        puts [ join [ maria::sel $maria_handler "select @p_c_id,@p_c_last,@p_w_street_1,@p_w_street_2,@p_w_city,@p_w_state,@p_w_zip,@p_d_street_1,@p_d_street_2,@p_d_city,@p_d_state,@p_d_zip,@p_c_first,@p_c_middle,@p_c_street_1,@p_c_street_2,@p_c_city,@p_c_state,@p_c_zip,@p_c_phone,@p_c_since,@p_c_credit,@p_c_credit_lim,@p_c_discount,@p_c_balance,@p_c_data" -list ] ]
    }
}

#ORDER_STATUS
proc ostat { maria_handler w_id prepare RAISEERROR } {
    global mariastatus
    #2.5.1.1 select district id randomly from home warehouse where d_w_id = d_id
    set d_id [ RandomNumber 1 10 ]
    set nrnd [ NURand 255 0 999 123 ]
    set name [ randname $nrnd ]
    set c_id [ RandomNumber 1 3000 ]
    set y [ RandomNumber 1 100 ]
    if { $y <= 60 } {
        set byname 1
    } else {
        set byname 0
        set name {}
    }
    if {$prepare} {
        catch {mariaexec $maria_handler "set @os_w_id=$w_id,@dos_d_id=$d_id,@os_c_id=$c_id,@byname=$byname,@os_c_last='$name'"}
        catch {mariaexec $maria_handler "execute ostat_st using @os_w_id,@dos_d_id,@os_c_id,@byname,@os_c_last"}
    } else {
        mariaexec $maria_handler "set @os_c_id = $c_id, @os_c_last = '$name'"
        catch { mariaexec $maria_handler "CALL OSTAT($w_id,$d_id,@os_c_id,$byname,@os_c_last,@os_c_first,@os_c_middle,@os_c_balance,@os_o_id,@os_entdate,@os_o_carrier_id)"}
    }
    if { $mariastatus(code) } {
        if { $RAISEERROR } {
            error "Order Status : $mariastatus(message)"
        } else {
            puts $mariastatus(message) 
        } 
    } else {
        puts [ join [ maria::sel $maria_handler "select @os_c_id,@os_c_last,@os_c_first,@os_c_middle,@os_c_balance,@os_o_id,@os_entdate,@os_o_carrier_id" -list ] ]
    }
}

#DELIVERY
proc delivery { maria_handler w_id prepare RAISEERROR } {
    global mariastatus
    set carrier_id [ RandomNumber 1 10 ]
    set date [ gettimestamp ]
    if {$prepare} {
        catch {mariaexec $maria_handler "set @d_w_id=$w_id,@d_o_carrier_id=$carrier_id,@timestamp=str_to_date($date,'%Y%m%d%H%i%s')"}
        catch {mariaexec $maria_handler "execute delivery_st using @d_w_id,@d_o_carrier_id,@timestamp"}
    } else {
        catch { mariaexec $maria_handler "CALL DELIVERY($w_id,$carrier_id,str_to_date($date,'%Y%m%d%H%i%s'))"}
    }
    if { $mariastatus(code) } {
        if { $RAISEERROR } {
            error "Delivery : $mariastatus(message)"
        } else {
            puts $mariastatus(message) 
        } 
    } else {
        puts "$w_id $carrier_id $date"
    }
}

#STOCK LEVEL
proc slev { maria_handler w_id stock_level_d_id prepare RAISEERROR } {
    global mariastatus
    set threshold [ RandomNumber 10 20 ]
    if {$prepare} {
        catch {mariaexec $maria_handler "set @st_w_id=$w_id,@st_d_id=$stock_level_d_id,@threshold=$threshold"}
        catch {mariaexec $maria_handler "execute slev_st using @st_w_id,@st_d_id,@threshold"}
    } else {
        catch {mariaexec $maria_handler "CALL SLEV($w_id,$stock_level_d_id,$threshold,@stock_count)"}
    }
    if { $mariastatus(code) } {
        if { $RAISEERROR } {
            error "Stock Level : $mariastatus(message)"
        } else {
            puts $mariastatus(message) 
        } 
    } else {
        puts [ join [ maria::sel $maria_handler "select @stock_count" -list ] ]
    }
}

proc prep_statement { maria_handler statement_st } {
    switch $statement_st {
        slev_st {
            mariaexec $maria_handler "prepare slev_st from 'CALL SLEV(?,?,?,@stock_count)'"
        }
        delivery_st {
            mariaexec $maria_handler "prepare delivery_st from 'CALL DELIVERY(?,?,?)'"
        }
        ostat_st {
            mariaexec $maria_handler "prepare ostat_st from 'CALL OSTAT(?,?,?,?,?,@os_c_first,@os_c_middle,@os_c_balance,@os_o_id,@os_entdate,@os_o_carrier_id)'"
        }
        payment_st {
            mariaexec $maria_handler "prepare payment_st from 'CALL PAYMENT(?,?,?,?,?,?,?,?,@p_w_street_1,@p_w_street_2,@p_w_city,@p_w_state,@p_w_zip,@p_d_street_1,@p_d_street_2,@p_d_city,@p_d_state,@p_d_zip,@p_c_first,@p_c_middle,@p_c_street_1,@p_c_street_2,@p_c_city,@p_c_state,@p_c_zip,@p_c_phone,@p_c_since,?,@p_c_credit_lim,@p_c_discount,?,@p_c_data,?)'"
        }
        neword_st {
            mariaexec $maria_handler "prepare neword_st from 'CALL NEWORD(?,?,?,?,?,@disc,@last,@credit,@dtax,@wtax,?,?)'"
        }
    }
}

#RUN TPC-C
set maria_handler [ ConnectToMaria $host $port $socket $ssl_options $user $password $db ]
if {$prepare} {
    foreach st {neword_st payment_st delivery_st slev_st ostat_st} { set $st [ prep_statement $maria_handler $st ] }
}
set w_id_input [ list [ maria::sel $maria_handler "select max(w_id) from warehouse" -list ] ]
#2.4.1.1 set warehouse_id stays constant for a given terminal
set w_id  [ RandomNumber 1 $w_id_input ]  
set d_id_input [ list [ maria::sel $maria_handler "select max(d_id) from district" -list ] ]
set stock_level_d_id  [ RandomNumber 1 $d_id_input ]  
puts "Processing $total_iterations transactions without output suppressed..."
set abchk 1; set abchk_mx 1024; set hi_t [ expr {pow([ lindex [ time {if {  [ tsv::get application abort ]  } { break }} ] 0 ],2)}]
for {set it 0} {$it < $total_iterations} {incr it} {
    if { [expr {$it % $abchk}] eq 0 } { if { [ time {if {  [ tsv::get application abort ]  } { break }} ] > $hi_t }  {  set  abchk [ expr {min(($abchk * 2), $abchk_mx)}]; set hi_t [ expr {$hi_t * 2} ] } }
    set choice [ RandomNumber 1 23 ]
    if {$choice <= 10} {
        puts "new order"
        if { $KEYANDTHINK } { keytime 18 }
        neword $maria_handler $w_id $w_id_input $prepare $RAISEERROR
        if { $KEYANDTHINK } { thinktime 12 }
    } elseif {$choice <= 20} {
        puts "payment"
        if { $KEYANDTHINK } { keytime 3 }
        payment $maria_handler $w_id $w_id_input $prepare $RAISEERROR
        if { $KEYANDTHINK } { thinktime 12 }
    } elseif {$choice <= 21} {
        puts "delivery"
        if { $KEYANDTHINK } { keytime 2 }
        delivery $maria_handler $w_id $prepare $RAISEERROR
        if { $KEYANDTHINK } { thinktime 10 }
    } elseif {$choice <= 22} {
        puts "stock level"
        if { $KEYANDTHINK } { keytime 2 }
        slev $maria_handler $w_id $stock_level_d_id $prepare $RAISEERROR
        if { $KEYANDTHINK } { thinktime 5 }
    } elseif {$choice <= 23} {
        puts "order status"
        if { $KEYANDTHINK } { keytime 2 }
        ostat $maria_handler $w_id $prepare $RAISEERROR
        if { $KEYANDTHINK } { thinktime 5 }
    }
}
if {$prepare} {
    foreach st {neword_st payment_st delivery_st slev_st ostat_st} {
        catch {mariaexec $maria_handler "deallocate prepare $st"}
    }
}
mariaclose $maria_handler

